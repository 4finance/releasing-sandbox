//Based on release.gradle from Mockito project by Szczepan Faber - https://github.com/mockito/mockito
assert project == rootProject

apply from: rootProject.file("gradle/publish.gradle")

def dryRun = project.hasProperty('dryRun')
def branch = System.env.TRAVIS_BRANCH
def localRelease = project.hasProperty("localRelease")

task("releaseNeeded") {
    println "Checking if release is needed..."
    doLast {
        def pr = System.env.TRAVIS_PULL_REQUEST
        def ci = System.env.CI
//        ext.needed = dryRun || (pr == 'false' && branch == 'master') || (ci == null && pr == null && localRelease)
        ext.needed = dryRun || (pr == 'false' /*&& branch == 'master'*/) || (ci == null && pr == null && localRelease)  //TODO: master is ok in sandbox project
        logger.lifecycle("Release needed: {}, branch: {}, pull request: {}, dry run: {}, ci: {}, localRelease: {}.", needed, branch, pr, dryRun, ci, localRelease)
    }
}

bintrayUpload {
    dependsOn releaseNeeded
    onlyIf { releaseNeeded.needed }
    doFirst {
        if (dryRun) {
            logger.lifecycle "Dry-running bintrayUpload"
        }
    }
}

release {
    dependsOn releaseNeeded
    onlyIf { releaseNeeded.needed }
}

task("finalizeRelease") {
    dependsOn bintrayUpload, releaseNeeded
    onlyIf { releaseNeeded.needed }
    doLast {
        if (dryRun) {
            logger.lifecycle "Dry-running finalizeRelease"
        }
        println "Finalizing release..."

        def pushCommand = ["git", "push", "--follow-tags", "origin"]
        if (!localRelease) {
            pushCommand << "HEAD:${branch}"
        }
        if (dryRun) {
            pushCommand << '--dry-run'
        }

        runCommand pushCommand
    }
}

//TODO: Move before making commit by Axion
private void configureGit() {
    runCommand "git", "config", "user.email", "4financebot@gmail.com"
    runCommand "git", "config", "user.name", "4Finance Bot"
    runCommand "git", "config", "push.default", "simple"
    runCommand "git", "remote", "set-url", "origin", new MaskedArg(value: "https://${System.env.GH_TOKEN}@github.com/4finance/releasing-sandbox.git")
}

private void runCommand(Object ... args) {
    runCommand(args as List)
}
private void runCommand(Collection args) {
    logger.lifecycle("--- Executing: {}", args.join(" "))
    exec { commandLine args.collect { it instanceof MaskedArg? it.value : it.toString()} }
    logger.lifecycle("--- Completed!", args)
}
class MaskedArg {
    String value
    String toString() { "<masked>" }
}
